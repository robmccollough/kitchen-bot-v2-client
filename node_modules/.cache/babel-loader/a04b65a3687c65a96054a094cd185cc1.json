{"ast":null,"code":"import _slicedToArray from \"/Users/peytongillenwater/Desktop/Classes/COMP426/KitchenBot/kitchen-bot-v2-client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { createContext, useContext, useRef as useRef$1, createElement } from 'react';\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nconst RADIO_INPUT = 'radio';\nconst UNDEFINED = 'undefined';\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nfunction attachEventListeners({\n  field,\n  validateAndStateUpdate,\n  isRadioOrCheckbox\n}) {\n  const ref = field.ref;\n\n  if (!ref.addEventListener) {\n    return;\n  }\n\n  ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, validateAndStateUpdate);\n  ref.addEventListener(EVENTS.BLUR, validateAndStateUpdate);\n}\n\nvar isUndefined = val => val === undefined;\n\nvar isNullOrUndefined = value => value === null || isUndefined(value);\n\nvar isArray = value => Array.isArray(value);\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nconst reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst reIsPlainProp = /^\\w*$/;\nconst rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst reIsUint = /^(?:0|[1-9]\\d*)$/;\n\nfunction isIndex(value) {\n  return reIsUint.test(value) && value > -1;\n}\n\nfunction isKey(value) {\n  if (isArray(value)) {\n    return false;\n  }\n\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value);\n}\n\nconst stringToPath = string => {\n  const result = [];\n  string.replace(rePropName, (match, number, quote, string) => {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : isIndex(tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar combineFieldValues = data => Object.entries(data).reduce((previous, [key, value]) => {\n  if (!!key.match(/\\[.+\\]/gi) || key.indexOf('.') > 0) {\n    set(previous, key, value);\n    return previous;\n  }\n\n  return Object.assign(Object.assign({}, previous), {\n    [key]: value\n  });\n}, {});\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\n  if (!ref.removeEventListener) {\n    return;\n  }\n\n  ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n  ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n  ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n};\n\nvar isRadioInput = type => type === RADIO_INPUT;\n\nvar isCheckBoxInput = type => type === 'checkbox';\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, validateWithStateUpdate = () => {}, field, forceDelete) {\n  if (!field) {\n    return;\n  }\n\n  const ref = field.ref,\n        mutationWatcher = field.mutationWatcher;\n\n  if (!ref.type || !fields[ref.name]) {\n    return;\n  }\n\n  const name = ref.name,\n        type = ref.type;\n  const options = fields[name];\n\n  if (isRadioInput(type) || isCheckBoxInput(type)) {\n    if (isArray(options) && options.length) {\n      options.forEach(({\n        ref\n      }, index) => {\n        const option = options[index];\n\n        if (option && isDetached(ref) || forceDelete) {\n          const mutationWatcher = option.mutationWatcher;\n          removeAllEventListeners(option, validateWithStateUpdate);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          options.splice(index, 1);\n        }\n      });\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) || forceDelete) {\n    removeAllEventListeners(ref, validateWithStateUpdate);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nconst defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = options => isArray(options) ? options.reduce((previous, {\n  ref: {\n    checked,\n    value\n  }\n}) => checked ? {\n  isValid: true,\n  value\n} : previous, defaultReturn) : defaultReturn;\n\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\n\nvar isMultipleSelect = type => type === 'select-multiple';\n\nvar isEmptyString = value => value === '';\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(({\n        ref: {\n          checked\n        }\n      }) => checked).map(({\n        ref: {\n          value\n        }\n      }) => value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    const _options$0$ref = options[0].ref,\n          checked = _options$0$ref.checked,\n          value = _options$0$ref.value,\n          valueAttribute = _options$0$ref.attributes.value;\n    return checked ? valueAttribute ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  const type = ref.type,\n        name = ref.name,\n        options = ref.options,\n        value = ref.value,\n        files = ref.files;\n  const field = fields[name];\n\n  if (type === 'file') {\n    return files;\n  }\n\n  if (isRadioInput(type)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(type)) {\n    return getMultipleSelectValue(options);\n  }\n\n  if (isCheckBoxInput(type)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar getFieldsValues = fields => Object.values(fields).reduce((previous, {\n  ref,\n  ref: {\n    name\n  }\n}) => Object.assign(Object.assign({}, previous), {\n  [name]: getFieldValue(fields, ref)\n}), {});\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar isSameError = (error, type, message) => isObject(error) && error.type === type && error.message === message;\n\nfunction shouldUpdateWithError({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation\n}) {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = error[name];\n  const existFieldError = errors[name];\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError.type, currentFieldError.message);\n}\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getValueAndMessage = validationData => {\n  const isPureObject = isObject(validationData) && !isRegex(validationData);\n  return {\n    value: isPureObject ? validationData.value : validationData,\n    message: isPureObject ? validationData.message : ''\n  };\n};\n\nvar isString = value => typeof value === 'string';\n\nvar displayNativeError = (nativeValidation, ref, message) => {\n  if (nativeValidation && isString(message)) {\n    ref.setCustomValidity(message);\n  }\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar isBoolean = value => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, nativeError, type = 'validate') {\n  const isStringValue = isString(result);\n\n  if (isStringValue || isBoolean(result) && !result) {\n    const message = isStringValue ? result : '';\n    const error = {\n      type,\n      message,\n      ref\n    };\n    nativeError(message);\n    return error;\n  }\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\n  if (!validateAllFieldCriteria) {\n    return {};\n  }\n\n  const error = errors[name] || {\n    types: {}\n  };\n  return Object.assign(Object.assign({}, error), {\n    types: Object.assign(Object.assign({}, error.types), {\n      [type]: message || true\n    })\n  });\n};\n\nvar validateField = async (fields, nativeValidation, validateAllFieldCriteria, {\n  ref,\n  ref: {\n    type,\n    value,\n    name\n  },\n  options,\n  required,\n  maxLength,\n  minLength,\n  min,\n  max,\n  pattern,\n  validate\n}) => {\n  const error = {};\n  const isRadio = isRadioInput(type);\n  const isCheckBox = isCheckBoxInput(type);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const nativeError = displayNativeError.bind(null, nativeValidation, ref);\n  const typedName = name;\n  const appendErrorsCurry = appendErrors.bind(null, typedName, validateAllFieldCriteria, error);\n\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid)) {\n    const message = isString(required) ? required : getValueAndMessage(required).message;\n    error[typedName] = Object.assign({\n      type: INPUT_VALIDATION_RULES.required,\n      message,\n      ref: isRadioOrCheckbox ? fields[typedName].options[0].ref : ref\n    }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n    nativeError(message);\n\n    if (!validateAllFieldCriteria) {\n      return error;\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n\n    const _getValueAndMessage = getValueAndMessage(max),\n          maxValue = _getValueAndMessage.value,\n          maxMessage = _getValueAndMessage.message;\n\n    const _getValueAndMessage2 = getValueAndMessage(min),\n          minValue = _getValueAndMessage2.value,\n          minMessage = _getValueAndMessage2.message;\n\n    if (type === 'number') {\n      const valueNumber = parseFloat(value);\n\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      if (isString(maxValue)) {\n        exceedMax = new Date(value) > new Date(maxValue);\n      }\n\n      if (isString(minValue)) {\n        exceedMin = new Date(value) < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      const message = exceedMax ? maxMessage : minMessage;\n      error[typedName] = Object.assign({\n        type: exceedMax ? INPUT_VALIDATION_RULES.max : INPUT_VALIDATION_RULES.min,\n        message,\n        ref\n      }, exceedMax ? appendErrorsCurry(INPUT_VALIDATION_RULES.max, message) : appendErrorsCurry(INPUT_VALIDATION_RULES.min, message));\n      nativeError(message);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const _getValueAndMessage3 = getValueAndMessage(maxLength),\n          maxLengthValue = _getValueAndMessage3.value,\n          maxLengthMessage = _getValueAndMessage3.message;\n\n    const _getValueAndMessage4 = getValueAndMessage(minLength),\n          minLengthValue = _getValueAndMessage4.value,\n          minLengthMessage = _getValueAndMessage4.message;\n\n    const inputLength = value.toString().length;\n    const exceedMax = maxLength && inputLength > maxLengthValue;\n    const exceedMin = minLength && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      const message = exceedMax ? maxLengthMessage : minLengthMessage;\n      error[typedName] = Object.assign({\n        type: exceedMax ? INPUT_VALIDATION_RULES.maxLength : INPUT_VALIDATION_RULES.minLength,\n        message,\n        ref\n      }, exceedMax ? appendErrorsCurry(INPUT_VALIDATION_RULES.maxLength, message) : appendErrorsCurry(INPUT_VALIDATION_RULES.minLength, message));\n      nativeError(message);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const _getValueAndMessage5 = getValueAndMessage(pattern),\n          patternValue = _getValueAndMessage5.value,\n          patternMessage = _getValueAndMessage5.message;\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[typedName] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n      nativeError(patternMessage);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldValue(fields, ref);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef, nativeError);\n\n      if (validateError) {\n        error[typedName] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      const validateFunctions = Object.entries(validate);\n      const validationResult = await new Promise(resolve => {\n        validateFunctions.reduce(async (previous, [key, validate], index) => {\n          if (!isEmptyObject((await previous)) && !validateAllFieldCriteria || !isFunction(validate)) {\n            return resolve(previous);\n          }\n\n          let result;\n          const validateResult = await validate(fieldValue);\n          const validateError = getValidateError(validateResult, validateRef, nativeError, key);\n\n          if (validateError) {\n            result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              error[typedName] = result;\n            }\n          } else {\n            result = previous;\n          }\n\n          return validateFunctions.length - 1 === index ? resolve(result) : result;\n        }, {});\n      });\n\n      if (!isEmptyObject(validationResult)) {\n        error[typedName] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  if (nativeValidation) {\n    ref.setCustomValidity('');\n  }\n\n  return error;\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner) ? error.inner.reduce((previous, {\n  path,\n  message,\n  type\n}) => Object.assign(Object.assign({}, previous), previous[path] && validateAllFieldCriteria ? {\n  [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message)\n} : {\n  [path]: Object.assign({\n    message,\n    type\n  }, validateAllFieldCriteria ? {\n    types: {\n      [type]: message || true\n    }\n  } : {})\n}), {}) : {\n  [error.path]: {\n    message: error.message,\n    type: error.type\n  }\n};\n\nasync function validateWithSchema(validationSchema, validationSchemaOption, validateAllFieldCriteria, data) {\n  try {\n    return {\n      result: await validationSchema.validate(data, validationSchemaOption),\n      fieldErrors: {}\n    };\n  } catch (e) {\n    return {\n      result: {},\n      fieldErrors: parseErrorSchema(e, validateAllFieldCriteria)\n    };\n  }\n}\n\nfunction attachNativeValidation(ref, rules) {\n  Object.entries(rules).forEach(([key, value]) => {\n    if (key === INPUT_VALIDATION_RULES.pattern && isRegex(value)) {\n      ref[key] = value.source;\n    } else {\n      ref[key] = key === INPUT_VALIDATION_RULES.pattern || value;\n    }\n  });\n}\n\nvar get = (obj, path, defaultValue) => {\n  const result = path.split(/[,[\\].]+?/).filter(Boolean).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? defaultValue : result;\n};\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name]) ? get(defaultValues, name, defaultValue) : defaultValues[name];\n\nfunction flatArray(list) {\n  return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => isArray(values) ? values.map((item, index) => {\n  const pathWithIndex = \"\".concat(path, \"[\").concat(index, \"]\");\n  return isPrimitive(item) ? pathWithIndex : getPath(pathWithIndex, item);\n}) : Object.entries(values).map(([key, objectValue]) => {\n  const pathWithKey = \"\".concat(path, \".\").concat(key);\n  return isPrimitive(objectValue) ? pathWithKey : getPath(pathWithKey, objectValue);\n});\n\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\n  let value;\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    watchFields.add(fieldName);\n    value = fieldValues[fieldName];\n  } else {\n    value = get(combineFieldValues(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(name => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value) ? isObject(combinedDefaultValues) ? getDefaultValue(combinedDefaultValues, fieldName) : combinedDefaultValues : value;\n};\n\nvar omitValidFields = (errorFields, validFieldNames) => Object.entries(errorFields).reduce((previous, [name, error]) => validFieldNames.some(validFieldName => validFieldName === name) ? previous : Object.assign(Object.assign({}, previous), {\n  [name]: error\n}), {});\n\nfunction onDomRemove(element, onDetachCallback) {\n  const observer = new MutationObserver(() => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst omitObject = (obj, key) => {\n  const _a = key,\n        omitted = obj[_a],\n        rest = __rest(obj, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\n\n  return rest;\n};\n\nvar modeChecker = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange\n});\n\nconst useRef = React.useRef,\n      useState = React.useState,\n      useCallback = React.useCallback,\n      useEffect = React.useEffect;\n\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  validationSchema,\n  defaultValues = {},\n  nativeValidation = false,\n  submitFocusError = true,\n  validationSchemaOption = {\n    abortEarly: false\n  },\n  validateCriteriaMode\n} = {}) {\n  const fieldsRef = useRef({});\n  const validateAllFieldCriteria = validateCriteriaMode === 'all';\n  const errorsRef = useRef({});\n  const touchedFieldsRef = useRef(new Set());\n  const watchFieldsRef = useRef(new Set());\n  const dirtyFieldsRef = useRef(new Set());\n  const fieldsWithValidationRef = useRef(new Set());\n  const validFieldsRef = useRef(new Set());\n  const defaultInputValuesRef = useRef({});\n  const defaultValuesRef = useRef(defaultValues);\n  const isUnMount = useRef(false);\n  const isWatchAllRef = useRef(false);\n  const isSubmittedRef = useRef(false);\n  const isDirtyRef = useRef(false);\n  const submitCountRef = useRef(0);\n  const isSubmittingRef = useRef(false);\n  const validateAndUpdateStateRef = useRef();\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        _render = _useState2[1];\n\n  const _useRef$current = useRef(modeChecker(mode)).current,\n        isOnBlur = _useRef$current.isOnBlur,\n        isOnSubmit = _useRef$current.isOnSubmit;\n  const isWindowUndefined = typeof window === UNDEFINED;\n  const isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  const isProxyEnabled = !isWindowUndefined && 'Proxy' in window;\n  const readFormState = useRef({\n    dirty: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  const _useRef$current2 = useRef(modeChecker(reValidateMode)).current,\n        isReValidateOnBlur = _useRef$current2.isOnBlur,\n        isReValidateOnSubmit = _useRef$current2.isOnSubmit;\n  const validationSchemaOptionRef = useRef(validationSchemaOption);\n  defaultValuesRef.current = defaultValues;\n\n  const combineErrorsRef = data => Object.assign(Object.assign({}, errorsRef.current), data);\n\n  const render = useCallback(() => {\n    if (!isUnMount.current) {\n      _render({});\n    }\n  }, []);\n  const validateFieldCurry = useCallback(validateField.bind(null, fieldsRef.current, nativeValidation, validateAllFieldCriteria), []);\n  const validateWithSchemaCurry = useCallback(validateWithSchema.bind(null, validationSchema, validationSchemaOptionRef.current, validateAllFieldCriteria), [validationSchema]);\n  const renderBaseOnError = useCallback((name, error, shouldRender) => {\n    let reRender = shouldRender || shouldUpdateWithError({\n      errors: errorsRef.current,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || validationSchema) {\n        validFieldsRef.current.add(name);\n        reRender = reRender || errorsRef.current[name];\n      }\n\n      errorsRef.current = omitObject(errorsRef.current, name);\n    } else {\n      validFieldsRef.current.delete(name);\n      reRender = reRender || !errorsRef.current[name];\n    }\n\n    errorsRef.current = combineErrorsRef(error);\n\n    if (reRender) {\n      render();\n      return true;\n    }\n  }, [render, validationSchema]);\n  const setFieldValue = useCallback((name, rawValue) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    const ref = field.ref;\n    const type = ref.type;\n    const options = field.options;\n    const value = isWeb && ref instanceof window.HTMLElement && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(type) && options) {\n      options.forEach(({\n        ref: radioRef\n      }) => radioRef.checked = radioRef.value === value);\n    } else if (isMultipleSelect(type)) {\n      [...ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n    } else if (isCheckBoxInput(type) && options) {\n      options.length > 1 ? options.forEach(({\n        ref: checkboxRef\n      }) => checkboxRef.checked = value.includes(checkboxRef.value)) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n\n    return type;\n  }, [isWeb]);\n\n  const setDirty = name => {\n    if (!fieldsRef.current[name]) {\n      return false;\n    }\n\n    const isDirty = defaultInputValuesRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n    const isDirtyChanged = dirtyFieldsRef.current.has(name) !== isDirty;\n\n    if (isDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = !!dirtyFieldsRef.current.size;\n    return isDirtyChanged && readFormState.current.dirty;\n  };\n\n  const setInternalValue = useCallback((name, value) => {\n    setFieldValue(name, value);\n\n    if (setDirty(name) || !touchedFieldsRef.current.has(name) && readFormState.current.touched) {\n      return !!touchedFieldsRef.current.add(name);\n    }\n  }, [setFieldValue]);\n  const executeValidation = useCallback(async ({\n    name,\n    value\n  }, shouldRender) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    if (!isUndefined(value)) {\n      setInternalValue(name, value);\n    }\n\n    if (shouldRender) {\n      render();\n    }\n\n    const error = await validateFieldCurry(field);\n    renderBaseOnError(name, error);\n    return isEmptyObject(error);\n  }, [render, renderBaseOnError, setInternalValue, validateFieldCurry]);\n  const executeSchemaValidation = useCallback(async (payload, shouldRender) => {\n    const _ref = await validateWithSchemaCurry(combineFieldValues(getFieldsValues(fieldsRef.current))),\n          fieldErrors = _ref.fieldErrors;\n\n    const isMultipleFields = isArray(payload);\n    const names = isArray(payload) ? payload.map(({\n      name\n    }) => name) : [payload.name];\n    const validFieldNames = names.filter(name => !fieldErrors[name]);\n\n    if (isMultipleFields) {\n      errorsRef.current = omitValidFields(combineErrorsRef(Object.entries(fieldErrors).filter(([key]) => names.includes(key)).reduce((previous, [name, error]) => Object.assign(Object.assign({}, previous), {\n        [name]: error\n      }), {})), validFieldNames);\n      render();\n    } else {\n      const fieldName = names[0];\n      renderBaseOnError(fieldName, fieldErrors[fieldName] ? {\n        [fieldName]: fieldErrors[fieldName]\n      } : {}, shouldRender);\n    }\n\n    return isEmptyObject(errorsRef.current);\n  }, [render, renderBaseOnError, validateWithSchemaCurry]);\n  const triggerValidation = useCallback(async (payload, shouldRender) => {\n    const fields = payload || Object.keys(fieldsRef.current).map(name => ({\n      name\n    }));\n\n    if (validationSchema) {\n      return executeSchemaValidation(fields, shouldRender);\n    }\n\n    if (isArray(fields)) {\n      const result = await Promise.all(fields.map(async data => await executeValidation(data, false)));\n      render();\n      return result.every(Boolean);\n    }\n\n    return await executeValidation(fields, shouldRender);\n  }, [executeSchemaValidation, executeValidation, render, validationSchema]);\n  const setValue = useCallback((name, value, shouldValidate) => {\n    const shouldRender = setInternalValue(name, value) || isWatchAllRef.current || watchFieldsRef.current.has(name);\n\n    if (shouldValidate) {\n      return triggerValidation({\n        name\n      }, shouldRender);\n    }\n\n    if (shouldRender) {\n      render();\n    }\n\n    return;\n  }, [render, setInternalValue, triggerValidation]);\n  validateAndUpdateStateRef.current = validateAndUpdateStateRef.current ? validateAndUpdateStateRef.current : async ({\n    type,\n    target\n  }) => {\n    const name = target ? target.name : '';\n    const fields = fieldsRef.current;\n    const errors = errorsRef.current;\n    const field = fields[name];\n    const currentError = errors[name];\n    let error;\n\n    if (!field) {\n      return;\n    }\n\n    const isBlurEvent = type === EVENTS.BLUR;\n    const shouldSkipValidation = isOnSubmit && !isSubmittedRef.current || isOnBlur && !isBlurEvent && !currentError || isReValidateOnBlur && !isBlurEvent && currentError || isReValidateOnSubmit && currentError;\n    const shouldUpdateDirty = setDirty(name);\n    let shouldUpdateState = isWatchAllRef.current || watchFieldsRef.current.has(name) || shouldUpdateDirty;\n\n    if (isBlurEvent && !touchedFieldsRef.current.has(name) && readFormState.current.touched) {\n      touchedFieldsRef.current.add(name);\n      shouldUpdateState = true;\n    }\n\n    if (shouldSkipValidation) {\n      return shouldUpdateState && render();\n    }\n\n    if (validationSchema) {\n      const _ref2 = await validateWithSchemaCurry(combineFieldValues(getFieldsValues(fields))),\n            fieldErrors = _ref2.fieldErrors;\n\n      Object.keys(fieldErrors).forEach(name => validFieldsRef.current.delete(name));\n      error = fieldErrors[name] ? {\n        [name]: fieldErrors[name]\n      } : {};\n    } else {\n      error = await validateFieldCurry(field);\n    }\n\n    if (!renderBaseOnError(name, error) && shouldUpdateState) {\n      render();\n    }\n  };\n  const resetFieldRef = useCallback(name => {\n    errorsRef.current = omitObject(errorsRef.current, name);\n    fieldsRef.current = omitObject(fieldsRef.current, name);\n    defaultInputValuesRef.current = omitObject(defaultInputValuesRef.current, name);\n    [touchedFieldsRef, dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(data => data.current.delete(name));\n\n    if (readFormState.current.isValid || readFormState.current.touched) {\n      render();\n    }\n  }, [render]);\n  const removeEventListenerAndRef = useCallback((field, forceDelete) => {\n    if (!field) {\n      return;\n    }\n\n    findRemovedFieldAndRemoveListener(fieldsRef.current, validateAndUpdateStateRef.current, field, forceDelete);\n    resetFieldRef(field.ref.name);\n  }, [resetFieldRef]);\n\n  function clearError(name) {\n    if (isUndefined(name)) {\n      errorsRef.current = {};\n    } else {\n      (isArray(name) ? name : [name]).forEach(fieldName => errorsRef.current = omitObject(errorsRef.current, fieldName));\n    }\n\n    render();\n  }\n\n  const setInternalError = ({\n    name,\n    type,\n    types,\n    message,\n    preventRender\n  }) => {\n    const errors = errorsRef.current;\n\n    if (!isSameError(errors[name], type, message)) {\n      errors[name] = {\n        type,\n        types,\n        message,\n        ref: {},\n        isManual: true\n      };\n\n      if (!preventRender) {\n        render();\n      }\n    }\n  };\n\n  function setError(name, type = '', message) {\n    if (isString(name)) {\n      setInternalError(Object.assign({\n        name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type,\n        message\n      }));\n    } else if (isArray(name)) {\n      name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), {\n        preventRender: true\n      })));\n      render();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    const combinedDefaultValues = isUndefined(defaultValue) ? isUndefined(defaultValues) ? {} : defaultValues : defaultValue;\n    const fieldValues = getFieldsValues(fieldsRef.current);\n    const watchFields = watchFieldsRef.current;\n\n    if (isProxyEnabled) {\n      readFormState.current.dirty = true;\n    }\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce((previous, name) => {\n        let value = null;\n\n        if (isEmptyObject(fieldsRef.current) && isObject(combinedDefaultValues)) {\n          value = getDefaultValue(combinedDefaultValues, name);\n        } else {\n          value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\n        }\n\n        return Object.assign(Object.assign({}, previous), {\n          [name]: value\n        });\n      }, {});\n    }\n\n    isWatchAllRef.current = true;\n    return !isEmptyObject(fieldValues) && fieldValues || defaultValue || defaultValues;\n  }\n\n  function unregister(names) {\n    if (!isEmptyObject(fieldsRef.current)) {\n      (isArray(names) ? names : [names]).forEach(fieldName => removeEventListenerAndRef(fieldsRef.current[fieldName], true));\n    }\n  }\n\n  function registerIntoFieldsRef(ref, validateOptions = {}) {\n    if (!ref.name) {\n      return console.warn('Missing name at', ref);\n    }\n\n    const name = ref.name,\n          type = ref.type,\n          value = ref.value;\n    const fieldAttributes = Object.assign({\n      ref\n    }, validateOptions);\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioInput(type) || isCheckBoxInput(type);\n    let currentField = fields[name];\n\n    if (isRadioOrCheckbox ? currentField && isArray(currentField.options) && currentField.options.find(({\n      ref\n    }) => value === ref.value) : currentField) {\n      fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () => removeEventListenerAndRef(fieldAttributes));\n\n      if (isRadioOrCheckbox) {\n        currentField = Object.assign({\n          options: [...(currentField && currentField.options || []), {\n            ref,\n            mutationWatcher\n          }],\n          ref: {\n            type,\n            name\n          }\n        }, validateOptions);\n      } else {\n        currentField = Object.assign(Object.assign({}, fieldAttributes), {\n          mutationWatcher\n        });\n      }\n    } else {\n      currentField = fieldAttributes;\n    }\n\n    fields[name] = currentField;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      const defaultValue = getDefaultValue(defaultValuesRef.current, name);\n\n      if (!isUndefined(defaultValue)) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      const shouldRender = () => {\n        if (validFieldsRef.current.size === fieldsWithValidationRef.current.size) {\n          render();\n        }\n      };\n\n      if (!isOnSubmit && readFormState.current.isValid) {\n        if (validationSchema) {\n          validateWithSchemaCurry(combineFieldValues(getFieldsValues(fields))).then(({\n            fieldErrors\n          }) => {\n            if (fieldErrors[name]) {\n              validFieldsRef.current.add(name);\n            }\n\n            shouldRender();\n          });\n        } else {\n          validateFieldCurry(currentField).then(error => {\n            if (isEmptyObject(error)) {\n              validFieldsRef.current.add(name);\n            }\n\n            shouldRender();\n          });\n        }\n      }\n    }\n\n    if (!defaultInputValuesRef.current[name]) {\n      defaultInputValuesRef.current[name] = getFieldValue(fields, currentField.ref);\n    }\n\n    if (!type) {\n      return;\n    }\n\n    const fieldToAttachListener = isRadioOrCheckbox && currentField.options ? currentField.options[currentField.options.length - 1] : currentField;\n\n    if (nativeValidation && validateOptions) {\n      attachNativeValidation(ref, validateOptions);\n    } else {\n      attachEventListeners({\n        field: fieldToAttachListener,\n        isRadioOrCheckbox,\n        validateAndStateUpdate: validateAndUpdateStateRef.current\n      });\n    }\n  }\n\n  function register(refOrValidateRule, validationOptions) {\n    if (isWindowUndefined || !refOrValidateRule) {\n      return;\n    }\n\n    if (validationOptions && isString(validationOptions.name)) {\n      registerIntoFieldsRef({\n        name: validationOptions.name\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidateRule) && 'name' in refOrValidateRule) {\n      registerIntoFieldsRef(refOrValidateRule, validationOptions);\n      return;\n    }\n\n    return ref => ref && registerIntoFieldsRef(ref, refOrValidateRule);\n  }\n\n  const handleSubmit = useCallback(callback => async e => {\n    if (e) {\n      e.preventDefault();\n      e.persist();\n    }\n\n    let fieldErrors;\n    let fieldValues;\n    const fields = fieldsRef.current;\n\n    if (readFormState.current.isSubmitting) {\n      isSubmittingRef.current = true;\n      render();\n    }\n\n    try {\n      if (validationSchema) {\n        fieldValues = getFieldsValues(fields);\n        const output = await validateWithSchemaCurry(combineFieldValues(fieldValues));\n        errorsRef.current = output.fieldErrors;\n        fieldErrors = output.fieldErrors;\n        fieldValues = output.result;\n      } else {\n        const _ref3 = await Object.values(fields).reduce(async (previous, field) => {\n          if (!field) {\n            return previous;\n          }\n\n          const resolvedPrevious = await previous;\n          const ref = field.ref,\n                name = field.ref.name;\n\n          if (!fields[name]) {\n            return Promise.resolve(resolvedPrevious);\n          }\n\n          const fieldError = await validateFieldCurry(field);\n\n          if (fieldError[name]) {\n            resolvedPrevious.errors = Object.assign(Object.assign({}, resolvedPrevious.errors), fieldError);\n            validFieldsRef.current.delete(name);\n            return Promise.resolve(resolvedPrevious);\n          }\n\n          if (fieldsWithValidationRef.current.has(name)) {\n            validFieldsRef.current.add(name);\n          }\n\n          resolvedPrevious.values[name] = getFieldValue(fields, ref);\n          return Promise.resolve(resolvedPrevious);\n        }, Promise.resolve({\n          errors: {},\n          values: {}\n        })),\n              errors = _ref3.errors,\n              values = _ref3.values;\n\n        fieldErrors = errors;\n        fieldValues = values;\n      }\n\n      if (isEmptyObject(fieldErrors)) {\n        errorsRef.current = {};\n        await callback(combineFieldValues(fieldValues), e);\n      } else {\n        if (submitFocusError) {\n          Object.keys(fieldErrors).reduce((previous, current) => {\n            const field = fields[current];\n\n            if (field && previous) {\n              if (field.ref.focus) {\n                field.ref.focus();\n                return false;\n              } else if (field.options) {\n                field.options[0].ref.focus();\n                return false;\n              }\n            }\n\n            return previous;\n          }, true);\n        }\n\n        errorsRef.current = fieldErrors;\n      }\n    } finally {\n      isSubmittedRef.current = true;\n      isSubmittingRef.current = false;\n      submitCountRef.current = submitCountRef.current + 1;\n      render();\n    }\n  }, [render, submitFocusError, validateFieldCurry, validateWithSchemaCurry, validationSchema]);\n\n  const resetRefs = () => {\n    errorsRef.current = {};\n    defaultInputValuesRef.current = {};\n    touchedFieldsRef.current = new Set();\n    watchFieldsRef.current = new Set();\n    dirtyFieldsRef.current = new Set();\n    validFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    isSubmittedRef.current = false;\n    isDirtyRef.current = false;\n    submitCountRef.current = 0;\n  };\n\n  const reset = useCallback(values => {\n    const fieldsKeyValue = Object.entries(fieldsRef.current);\n\n    for (const _ref4 of fieldsKeyValue) {\n      var _ref5 = _slicedToArray(_ref4, 2);\n\n      const value = _ref5[1];\n\n      if (value && value.ref && value.ref.closest) {\n        try {\n          value.ref.closest('form').reset();\n          break;\n        } catch (_a) {}\n      }\n    }\n\n    resetRefs();\n\n    if (values) {\n      fieldsKeyValue.forEach(([key]) => setFieldValue(key, getDefaultValue(values, key)));\n      defaultInputValuesRef.current = Object.assign({}, values);\n\n      if (readFormState.current.isValid) {\n        triggerValidation();\n      }\n    }\n\n    render();\n  }, [render, setFieldValue, triggerValidation]);\n  const getValues = useCallback(payload => {\n    const fieldValues = getFieldsValues(fieldsRef.current);\n    const outputValues = isEmptyObject(fieldValues) ? defaultValues : fieldValues;\n    return payload && payload.nest ? combineFieldValues(outputValues) : outputValues;\n  }, [defaultValues]);\n  useEffect(() => () => {\n    isUnMount.current = true;\n    fieldsRef.current && Object.values(fieldsRef.current).forEach(field => removeEventListenerAndRef(field, true));\n  }, [removeEventListenerAndRef]);\n  const formState = Object.assign({\n    dirty: isDirtyRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: [...touchedFieldsRef.current],\n    isSubmitting: isSubmittingRef.current\n  }, isOnSubmit ? {\n    isValid: isSubmittedRef.current && isEmptyObject(errorsRef.current)\n  } : {\n    isValid: fieldsWithValidationRef.current.size ? !isEmptyObject(fieldsRef.current) && validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current) : !isEmptyObject(fieldsRef.current)\n  });\n  return {\n    register: useCallback(register, []),\n    unregister: useCallback(unregister, [removeEventListenerAndRef]),\n    handleSubmit,\n    watch,\n    reset,\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    setValue,\n    triggerValidation,\n    getValues,\n    errors: errorsRef.current,\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: (obj, prop) => {\n        if (prop in obj) {\n          readFormState.current[prop] = true;\n          return obj[prop];\n        }\n\n        return {};\n      }\n    }) : formState\n  };\n}\n\nconst FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(props) {\n  const children = props.children,\n        formState = props.formState,\n        errors = props.errors,\n        restMethods = __rest(props, [\"children\", \"formState\", \"errors\"]);\n\n  const restRef = useRef$1(restMethods);\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restRef.current), {\n      formState,\n      errors\n    })\n  }, children);\n}\n\nexport default useForm;\nexport { FormContext, useFormContext };","map":null,"metadata":{},"sourceType":"module"}