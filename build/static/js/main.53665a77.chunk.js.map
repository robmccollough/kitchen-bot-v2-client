{"version":3,"sources":["components/new/login/index.js","components/new/register/index.js","components/new/homeAdmin/index.js","components/new/home/index.js","components/new/root/index.js","redux/constants.js","redux/reducer.js","service/menu.js","redux/saga.js","redux/store.js","serviceWorker.js","index.js"],"names":["Login","props","console","log","to","Register","useState","email","setEmail","password","setPassword","confPassword","setConfPassword","onSubmit","event","value","preventDefault","onChange","e","target","placeholder","type","name","required","HomeAdmin","Home","Root","path","component","exact","from","MENU_UPLOAD_FORM_SUBMIT","MENU_UPLOAD_IS_LOADING","MENU_UPLOAD_NOT_LOADING","MENU_UPLOAD_COMPLETE","REQUEST_RECENT_MENU","RECENT_MENU_IS_LOADING","RECENT_MENU_NOT_LOADING","RECENT_MENU_FETCHED","MENU_UPLOAD_FORM_CHANGE","initialState","user","id","is_authenticated","menu_form","is_loading","is_visible","upload_success","data","date","Date","food","monday","main","side","tuesday","wednesday","thursday","friday","menu_display","axios","require","weekdays","MenuService","get","then","result","success","comp","forEach","val","index","catch","err","menu_data","post","menuUploadSaga","menuFetchSaga","menuSaga","action","put","call","uploadMenu","payload","getMenu","takeLatest","sagaMiddleware","createSagaMiddleware","createStore","state","day","meal","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53665a77.chunk.js","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Link } from 'react-router-dom';\nimport { Provider, connect, withRouter } from 'react-redux';\n\nconst Login = (props) => {\n    console.log(props)\n\n    //put the cookie check/redirect here\n    return <div>\n        <h1>Login</h1>\n        <Link to='home'> Home </Link>\n    </div>\n\n}\n\nexport default Login","import React, {useState} from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Link } from 'react-router-dom';\nimport { Provider, connect, withRouter } from 'react-redux';\n\nconst Register = (props) => {\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [confPassword, setConfPassword] = useState(\"\");\n\n    const onSubmit = (event, value) => {\n        event.preventDefault()\n        console.log(event, value)\n    }\n\n\n    //put the cookie check/redirect here\n    return <div>\n        <h1>Register</h1>\n        <Link to='/home'>Clink</Link>\n    <form onSubmit={onSubmit}>\n      <input\n        value={email}\n        onChange={e => setEmail(e.target.value)}\n        placeholder=\"Email address\"\n        type=\"email\"\n        name=\"email\"\n        required\n      />\n      <input\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n        placeholder=\"Password\"\n        type=\"password\"\n        name=\"password\"\n        required\n      />\n      <input\n        value={confPassword}\n        onChange={e => setConfPassword(e.target.value)}\n        placeholder=\"Confirm Password\"\n        type=\"password\"\n        name=\"confPassword\"\n        required\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n    </div>\n\n}\n\nexport default Register","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Link } from 'react-router-dom';\nimport { Provider, connect, withRouter } from 'react-redux';\n\nconst HomeAdmin = (props) => {\n    console.log(props)\n\n    //put the cookie check/redirect here\n    return <div>\n        <h1>HomeAdmin</h1>\n        <Link to='/home'>Clink</Link>\n    </div>\n\n}\n\nexport default HomeAdmin","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Link } from 'react-router-dom';\nimport { Provider, connect, withRouter } from 'react-redux';\n\nconst Home = (props) => {\n\n    //put the cookie check/redirect here\n    return <div>\n        <h1>Home</h1>\n        <Link to='/home'>Home</Link>\n        <Link to='/home/admin'>Admin</Link>\n        <Link to='/register'>Register</Link>\n    </div>\n\n}\n\nexport default Home","import React from 'react';\nimport './index.css';\nimport  {Header} from 'semantic-ui-react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { Provider, connect, withRouter } from 'react-redux';\nimport Login from '../login'\nimport Register from '../register'\nimport HomeAdmin from '../homeAdmin'\nimport Home from '../home'\n\n\n//Goal: Start at always being at login page, check for cookies->\n// if cookie found, use credentials to log in and redirect to home\n//if no cookie found, user logs in \n\n\nconst Root = (props) => {\n  \n  return (\n  // <Provider store={props.store}>\n    <Router>\n      <Switch>\n        <Route path='/home' component={Home}/>\n        <Route path='/home/admin' component={HomeAdmin}/>\n        <Route path='/login' component={Login}/>\n        <Route path='/register' component={Register}/>\n      </Switch>\n      <Redirect exact from=\"/\" to=\"login\" />\n    </Router>\n  // </Provider>\n  )\n}\n\nexport default Root","export const TEST = 'TEST';\nexport const MENU_UPLOAD_FORM_SUBMIT = 'MENU_UPLOAD_FORM_SUBMIT';\nexport const MENU_UPLOAD_IS_LOADING = 'MENU_UPLOAD_IS_LOADING';\nexport const MENU_UPLOAD_NOT_LOADING = 'MENU_UPLOAD_NOT_LOADING';\nexport const MENU_UPLOAD_COMPLETE = 'MENU_UPLOAD_COMPLETE';\nexport const REQUEST_RECENT_MENU = 'REQUEST_RECENT_MENU';\nexport const RECENT_MENU_IS_LOADING = 'RECENT_MENU_IS_LOADING';\nexport const RECENT_MENU_NOT_LOADING = 'RECENT_MENU_NOT_LOADING';\nexport const RECENT_MENU_FETCHED = 'RECENT_MENU_FETCHED';\nexport const MENU_UPLOAD_FORM_CHANGE = 'MENU_UPLOAD_FORM_CHANGE';","import {\n    MENU_UPLOAD_IS_LOADING,\n    MENU_UPLOAD_NOT_LOADING,\n    MENU_UPLOAD_COMPLETE,\n    RECENT_MENU_IS_LOADING, \n    RECENT_MENU_NOT_LOADING, \n    RECENT_MENU_FETCHED,\n    MENU_UPLOAD_FORM_CHANGE \n}from './constants';\n\nconst initialState = {\n        user:{\n            id: null,\n            is_authenticated: false\n        },\n        menu_form: {\n            is_loading: false,\n            is_visible: true,\n            upload_success: false,\n            data: {\n                date: new Date(),\n                food: {\n                monday:{\n                    main:'',\n                    side:''\n                    },\n                tuesday:{\n                    main:'',\n                    side:''\n                    },\n                wednesday:{\n                    main:'',\n                    side:''\n                    },\n                thursday:{\n                    main:'',\n                    side:''\n                    },\n                friday:{\n                    main:'',\n                    side:''\n                    }\n                }\n            }\n        },\n        menu_display: {\n            is_loading: false,\n            is_visible: true,\n            data: {\n                date: new Date(),\n                food: {\n                monday:{\n                    main:'',\n                    side:''\n                },\n                tuesday:{\n                    main:'',\n                    side:''\n                },\n                wednesday:{\n                    main:'',\n                    side:''\n                },\n                thursday:{\n                    main:'',\n                    side:''\n                },\n                friday:{\n                    main:'',\n                    side:''\n                }\n                }\n            }\n        }\n}\n\nexport function reducer(state = initialState, action){\n    switch(action.type){\n\n        case MENU_UPLOAD_IS_LOADING: return {\n            ...state,\n            menu_form: { \n                ...state.menu_form,\n                is_loading: true\n            }\n        }\n        case MENU_UPLOAD_NOT_LOADING: return {\n            ...state,\n            menu_form: { \n                ...state.menu_form,\n                is_loading: false\n            }\n        }\n\n        case MENU_UPLOAD_FORM_CHANGE: return {\n            ...state,\n            menu_form: {\n                ...state.menu_form,\n                data: {\n                    ...state.menu_form.data,\n                    food: {\n                        ...state.menu_form.data.food,\n                        [action.payload.day]: {\n                            ...state.menu_form.data.food[action.payload.day],\n                            [action.payload.meal]: action.payload.value\n                        }\n                    }\n\n                }\n            }\n        }\n\n        //the data upload will happen elsewhere, just reset the values displayed in the form\n        case MENU_UPLOAD_COMPLETE: return {\n            ...state,\n            menu_form: {\n                ...initialState.menu_form,\n                upload_success: true\n            }\n\n        }\n        case RECENT_MENU_IS_LOADING: return {\n            ...state,\n            menu_display: { \n                ...state.menu_display,\n                is_loading: true\n            }\n        }\n        case RECENT_MENU_NOT_LOADING: return {\n            ...state,\n            menu_display: { \n                ...state.menu_display,\n                is_loading: false\n            }\n        }\n        case RECENT_MENU_FETCHED: return {\n            ...state,\n            menu_display: {\n                ...state.menu_display,\n                data: action.payload\n            }\n        }\n        default:\n            return state;\n    }\n}","const axios = require('axios');\nconst weekdays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'];\n\nexport default class MenuService{\n\n    static getMenu(){\n        return axios.get('http://localhost:5000/api/menu/get').then((result) => {\n            \n            //for now treat as array\n            if(result.data.success){\n                let comp = {}\n                result.data.data.food.forEach((val, index) => {\n                    comp[weekdays[index]] = val\n                })\n                return {\n                    date: new Date(result.data.data.date),\n                    food: comp\n                }\n                //but in the future \n                //return result.data.data\n            }\n        }).catch(err => console.log('MenuService Error:' + err))\n        \n    }\n\n    static uploadMenu(menu_data){\n        return axios.post('http://localhost:5000/api/menu/upload', menu_data).then((result) => {\n            console.log(result)\n            return result\n        }).catch(err => console.log('MenuService Error:' + err))\n    }\n    \n}","import { put, call, takeEvery , takeLatest} from 'redux-saga/effects';\nimport MenuService from '../service/menu'\nimport {\n    MENU_UPLOAD_FORM_SUBMIT,\n    REQUEST_RECENT_MENU,\n    MENU_UPLOAD_COMPLETE,\n    MENU_UPLOAD_IS_LOADING,\n    MENU_UPLOAD_NOT_LOADING,\n    RECENT_MENU_FETCHED,\n    RECENT_MENU_IS_LOADING,\n    RECENT_MENU_NOT_LOADING,\n} from './constants'\n\nfunction* menuUploadSaga(action){\n    yield put({\n        type: MENU_UPLOAD_IS_LOADING\n    })\n    yield call(MenuService.uploadMenu, action.payload)\n    yield put({\n        type: MENU_UPLOAD_NOT_LOADING    \n    })\n    yield put({\n        type: MENU_UPLOAD_COMPLETE\n    })\n}   \n\n\nfunction* menuFetchSaga(){\n    yield put({\n        type: RECENT_MENU_IS_LOADING\n    })\n    const menu_data = yield call(MenuService.getMenu)\n    yield put({\n        type: RECENT_MENU_NOT_LOADING\n    })\n    yield put({\n        type: RECENT_MENU_FETCHED,\n        payload: menu_data\n    })\n}\n\n\n\nexport default function* menuSaga(){\n    yield takeLatest(MENU_UPLOAD_FORM_SUBMIT, menuUploadSaga)\n    yield takeLatest(REQUEST_RECENT_MENU, menuFetchSaga)\n}","import { createStore, applyMiddleware } from 'redux'\nimport {reducer} from './reducer'\nimport createSagaMiddleware from 'redux-saga'\nimport menuSaga from './saga'\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware)\n)\n\nsagaMiddleware.run(menuSaga)\n\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './components/new/root';\nimport store from '../src/redux/store'\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Root/>, document.querySelector('#root'));\n  \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}